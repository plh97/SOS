generator client {
  provider      = "prisma-client-js"
  // output = "../src/db"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  PRIVATE @map("0")
  GROUP   @map("1")
}

enum ContentType {
  TEXT_MESSAGE   @map("0")
  MEDIA_MESSAGE  @map("1")
  SYSTEM_MESSAGE @map("2")
  CALL_MESSAGE   @map("3")
  READ_MESSAGE   @map("4")
  RECALL_MESSAGE @map("5")
}

model User {
  id          String   @id @default(uuid()) @map("_id")
  createdAt   DateTime @default(now())
  username    String   @unique
  password    String
  bio         String?
  QQ          String?
  WeChat      String?
  github      String?
  permission  String?
  image       String   @default("")
  friend      User[]   @relation("friend-user", fields: friendId, references: id)
  friendId    String[]
  User        User[]   @relation("friend-user", fields: UserId, references: id)
  Message     Message? @relation("message-user")
  RoomMember  Room[]   @relation(name: "room-member-user", fields: UserId, references: id)
  UserId      String[] @unique
  RoomAdmin   Room[]   @relation(name: "room-admin-user", fields: UserId, references: id)
  RoomCreator Room?    @relation(name: "room-creator-user")
}

model Room {
  id          String      @id @default(uuid()) @map("_id")
  name        String
  image       String?
  channelType ChannelType @default(GROUP)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  readSeq     Json        @default("{}")
  message     Message[]   @relation("room-message")
  // 
  member      User[]      @relation("room-member-user", fields: memberId, references: id)
  memberId    String[]
  admin       User[]      @relation("room-admin-user", fields: adminId, references: id)
  adminId     String[]
  creator     User        @relation("room-creator-user", fields: creatorId, references: id)
  creatorId   String      @unique
}

model Message {
  id            String         @id @default(uuid()) @map("_id")
  createdAt     DateTime       @default(now())
  seq           Int
  contentType   ContentType    @default(TEXT_MESSAGE)
  channelId     String
  textMessage   TextMessage?
  mediaMessage  MediaMessage?
  readMessage   ReadMessage?
  recallMessage RecallMessage?
  systemMessage SystemMessage?
  user          User?          @relation("message-user", fields: userId, references: id)
  userId        String         @unique
  Room          Room           @relation("room-message", fields: roomId, references: id)
  roomId        String         @unique
  // reply
  reply         Message?       @relation("reply-message", fields: replyId, references: id, onDelete: NoAction, onUpdate: NoAction)
  replyId       String?        @unique
  Message       Message[]      @relation("reply-message")
}

type ReadMessage {
  operator    String
  lastReadSeq Int
  readSeq     Json   @default("{}")
}

type MediaMessage {
  url       String
  width     Float?
  height    Float?
  thumbnail String?
  extension String
  name      String
  size      Float
  fileType  String
  duration  String?
}

type TextMessage {
  text    String
  mention String[]
}

enum SystemActionType {
  ADD_MEMBER    @map("0")
  REMOVE_MEMBER @map("1")
  ADD_ADMIN     @map("2")
  REMOVE_ADMIN  @map("3")
  CREATE_ROOM   @map("4")
  REMOVE_ROOM   @map("5")
  ADD_FRIEND    @map("6")
  REMOVE_FRIEND @map("7")
  CHANGE_ROOM   @map("8")
}

type SystemMessage {
  actionType SystemActionType
  content    String?          @default("")
}

type RecallMessage {
  operator    String
  recallMsgId String
}
